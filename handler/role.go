// Code generated by apigen. DO NOT EDIT.
// GENERATED: 2025-09-26T13:49:40+07:00

package handler

import (
	"context"
	"encoding/json"
	"fmt"
	"log/slog"
	"net/http"
	"strconv"

	"hanoman.co.id/crudgen/model"
)

func RoleHandlerRegister(mux *http.ServeMux, store model.Store) {
	mux.HandleFunc("PUT /Role", func(w http.ResponseWriter, r *http.Request) {
		if err := RoleCreate(r.Context(), store, w, r); err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		}
	})
	mux.HandleFunc("GET /Role/{id}", func(w http.ResponseWriter, r *http.Request) {
		if err := RoleGet(r.Context(), store, w, r); err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		}
	})
	mux.HandleFunc("POST /Role", func(w http.ResponseWriter, r *http.Request) {
		if err := RoleFind(r.Context(), store, w, r); err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		}
	})
	mux.HandleFunc("PATCH /Role/{id}", func(w http.ResponseWriter, r *http.Request) {
		if err := RoleUpdate(r.Context(), store, w, r); err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		}
	})
	mux.HandleFunc("DELETE /Role/{id}", func(w http.ResponseWriter, r *http.Request) {
		if err := RoleDelete(r.Context(), store, w, r); err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		}
	})
}

func RoleCreate(ctx context.Context, store model.Store, w http.ResponseWriter, r *http.Request) error {
	var obj model.Role
	err := json.NewDecoder(r.Body).Decode(&obj)
	if err != nil {
		slog.Warn("invalid body", "err", err)
		return fmt.Errorf("invalid body")
	}
	res, err := store.Role().Create(ctx, obj)
	if err != nil {
		slog.Warn("error create Role", "obj", obj, "err", err)
		return err
	}
	return json.NewEncoder(w).Encode(res)
}

func RoleGet(ctx context.Context, store model.Store, w http.ResponseWriter, r *http.Request) error {
	pid := r.PathValue("id")
	id, err := strconv.ParseInt(pid, 10, 64)
	if err != nil {
		slog.Warn("invalid id", "id", pid, "err", err)
		return fmt.Errorf("invalid id")
	}
	obj, err := store.Role().Get(ctx, id)
	if err != nil {
		slog.Warn("error get Role", "id", id, "err", err)
		return err
	}
	return json.NewEncoder(w).Encode(obj)
}

func RoleFind(ctx context.Context, store model.Store, w http.ResponseWriter, r *http.Request) error {
	var obj struct {
		Limit   int                 `json:"limit"`
		Offset  int64               `json:"offset"`
		Filter  []model.RoleFilter  `json:"filter"`
		Sorting []model.RoleSorting `json:"sorting"`
	}
	err := json.NewDecoder(r.Body).Decode(&obj)
	if err != nil {
		slog.Warn("invalid body", "err", err)
		return fmt.Errorf("invalid body")
	}
	var result struct {
		List  []model.Role `json:"list"`
		Total int64        `json:"total"`
	}
	result.List, result.Total, err = store.Role().Find(ctx, obj.Filter, obj.Sorting, obj.Limit, obj.Offset)
	if err != nil {
		slog.Warn("error find Role", "filter", obj.Filter, "sorting", obj.Sorting, "limit", obj.Limit, "offset", obj.Offset, "err", err)
		return err
	}
	return json.NewEncoder(w).Encode(result)
}

func RoleUpdate(ctx context.Context, store model.Store, w http.ResponseWriter, r *http.Request) error {
	var obj struct {
		Value  model.Role        `json:"value"`
		Fields []model.RoleField `json:"fields"`
	}
	err := json.NewDecoder(r.Body).Decode(&obj)
	if err != nil {
		slog.Warn("invalid body", "err", err)
		return fmt.Errorf("invalid body")
	}
	pid := r.PathValue("id")
	id, err := strconv.ParseInt(pid, 10, 64)
	if err != nil {
		slog.Warn("invalid id", "id", pid, "err", err)
		return fmt.Errorf("invalid id")
	}
	obj.Value.ID = id
	err = store.Role().Update(ctx, obj.Value, obj.Fields)
	if err != nil {
		slog.Warn("error create Role", "obj", obj, "err", err)
		return err
	}
	return json.NewEncoder(w).Encode(obj.Value)
}

func RoleDelete(ctx context.Context, store model.Store, w http.ResponseWriter, r *http.Request) error {
	pid := r.PathValue("id")
	id, err := strconv.ParseInt(pid, 10, 64)
	if err != nil {
		slog.Warn("invalid id", "id", pid, "err", err)
		return fmt.Errorf("invalid id")
	}
	err = store.Role().Delete(ctx, id)
	if err != nil {
		slog.Warn("error get Role", "id", id, "err", err)
		return err
	}
	return json.NewEncoder(w).Encode(map[string]string{"status": "ok"})
}
