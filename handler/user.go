// Code generated by apigen. DO NOT EDIT.
// GENERATED: 2025-09-26T08:10:57+07:00

package handler

import (
	"context"
	"encoding/json"
	"fmt"
	"log/slog"
	"net/http"
	"strconv"
)

func UserHandlerRegister(mux *http.ServeMux, store model.Store) {
	mux.HandleFunc("/User/{id}", func(w http.ResponseWriter, r *http.Request) {
		if err := UserGet(r.Context(), store, w, r); err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		}
	})
	mux.HandleFunc("/User", func(w http.ResponseWriter, r *http.Request) {
		if err := UserList(r.Context(), store, w, r); err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		}
	})
}

func UserGet(ctx context.Context, store model.Store, w http.ResponseWriter, r *http.Request) error {
	pid := r.PathValue("id")
	id, err := strconv.ParseInt(pid, 10, 64)
	if err != nil {
		slog.Warn("invalid id", "id", pid, "err", err)
		return fmt.Errorf("invalid id")
	}
	obj, err := store.User().Get(ctx, id)
	if err != nil {
		slog.Warn("error get User", "id", id, "err", err)
		return err
	}
	return json.NewEncoder(w).Encode(obj)
}

func UserList(ctx context.Context, store model.Store, w http.ResponseWriter, r *http.Request) error {
	plimit := r.URL.Query().Get("limit")
	limit, err := strconv.Atoi(plimit)
	if err != nil || limit <= 0 {
		slog.Warn("invalid limit", "limit", plimit, "err", err)
		return fmt.Errorf("invalid limit")
	}
	poffset := r.URL.Query().Get("offset")
	offset, err := strconv.ParseInt(poffset, 10, 64)
	if err != nil || offset < 0 {
		slog.Warn("invalid offset", "offset", poffset, "err", err)
		return fmt.Errorf("invalid offset")
	}
	var filter []model.RoleFilter
	var sorting []model.RoleSort
	var result struct {
		List  []model.Role `json:"list"`
		Total int64        `json:"total"`
	}
	result.List, result.Total, err = store.Role().Find(ctx, filter, sorting, limit, offset)
	if err != nil {
		slog.Warn("error find Role", "filter", filter, "sorting", sorting, "limit", limit, "offset", offset, "err", err)
		return err
	}
	return json.NewEncoder(w).Encode(result)
}
