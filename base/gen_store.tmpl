{{define "StoreInterface" -}}
package {{.Package}}

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"log/slog"
	"strings"
)

func (r *StoreImpl) {{.ID}}() {{.ID}}Store {
	return &{{.ID}}StoreImpl{
		StoreImpl: r,
	}
}

type {{.ID}}Store interface {
  Create(ctx context.Context, obj {{.ID}}) (*{{.ID}}, error)
  Get(ctx context.Context, {{template "ParamFk" . }}) (*{{.ID}}, error)
  {{range .Uniques -}}
  GetBy{{.ID}}(ctx context.Context, {{template "ParamUnique" . }}) (*{{.Model.ID}}, error)
  {{- end}}
  FindOne(ctx context.Context, filter []{{.ID}}Filter, sorting []{{.ID}}Sorting) (*{{.ID}}, error)
  Find(ctx context.Context, filter []{{.ID}}Filter, sorting []{{.ID}}Sorting, limit int, offset int64) ([]{{.ID}}, int64, error)
  Update(ctx context.Context, obj {{.ID}}, fields []{{.ID}}Field) error
  Delete(ctx context.Context, {{template "ParamFk" . }}) error
}

type {{.ID}}StoreImpl struct {
  *StoreImpl
}
{{end -}}

{{- define "ParamFk" -}}
  {{ $idx := 0}}{{range .PKeys -}}
    {{if gt $idx 0}}, {{end}}{{$idx = add $idx 1}}{{.Field}} {{.GoType}}
  {{- end}}
{{- end -}}

{{- define "ParamUnique" -}}
  {{- $idx := 0}}{{range .Fields -}}
    {{- if gt $idx 0}}, {{end}}{{$idx = add $idx 1}}{{.Field}} {{.GoType -}}
  {{- end}}
{{- end}}
