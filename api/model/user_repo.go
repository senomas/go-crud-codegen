// Code generated by apigen. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"log/slog"
	"strings"
)

type UserRepository interface {
	Create(ctx context.Context, obj User) (*User, error)
	Get(ctx context.Context, id int64) (*User, error)
	GetByName(ctx context.Context, name string) (*User, error)
	FindOne(ctx context.Context, filter []UserFilter, sort []UserSort) (*User, error)
	Find(ctx context.Context, filter []UserFilter, sort []UserSort, limit int, offset int64) ([]User, int64, error)
	Update(ctx context.Context, obj User, fields []UserField) error
	Delete(ctx context.Context, id int64) error
}

type UserRepositoryImpl struct {
	*RepositoryImpl
}

func (r *UserRepositoryImpl) Create(ctx context.Context, obj User) (*User, error) {
	var tx *sql.Tx
	var err error
	var txNew bool
	tx, err = r.db.BeginTx(ctx, nil)
	txNew = true
	defer tx.Rollback()
	qry := `
    INSERT INTO app_user (
      email,
      version,
      name,
      salt,
      password,
      token,
      created_by,
      created_at,
      updated_by,
      updated_at
    ) VALUES (
      $1,
      $2,
      $3,
      $4,
      $5,
      $6,
      $7,
      $8,
      $9,
      $10
    )`
	var objCreatedBy_ID *int64
	if obj.CreatedBy != nil {
		objCreatedBy_ID = &obj.CreatedBy.ID
	}
	var objUpdatedBy_ID *int64
	if obj.UpdatedBy != nil {
		objUpdatedBy_ID = &obj.UpdatedBy.ID
	}
	res, err := tx.ExecContext(ctx, qry,
		obj.Email,
		obj.Version,
		obj.Name,
		obj.Salt,
		obj.Password,
		obj.Token,
		objCreatedBy_ID,
		obj.CreatedAt,
		objUpdatedBy_ID,
		obj.UpdatedAt,
	)
	if err != nil {
		return nil, err
	}
	obj.ID, err = res.LastInsertId()
	if err != nil {
		return nil, err
	}
	if txNew {
		err = tx.Commit()
		if err != nil {
			return nil, err
		}
	}
	return &obj, nil
}

func (r *UserRepositoryImpl) Get(ctx context.Context, id int64) (*User, error) {
	qry := `
    SELECT
      obj.id,
      obj.email,
      obj.version,
      obj.name,
      obj.salt,
      obj.password,
      obj.token,
      objCreatedBy.id,
      objCreatedBy.email,
      objCreatedBy.name,
      obj.created_at,
      objUpdatedBy.id,
      objUpdatedBy.email,
      objUpdatedBy.name,
      obj.updated_at
    FROM
      ((app_user obj LEFT JOIN app_user objCreatedBy ON obj.created_by = objCreatedBy.id)
      LEFT JOIN app_user objUpdatedBy ON obj.updated_by = objUpdatedBy.id)
    WHERE
      obj.id = $1`
	var obj User
	var refCreatedBy_ID sql.NullInt64
	var refCreatedBy_Email sql.NullString
	var refCreatedBy_Name sql.NullString
	var refUpdatedBy_ID sql.NullInt64
	var refUpdatedBy_Email sql.NullString
	var refUpdatedBy_Name sql.NullString
	err := r.db.QueryRowContext(ctx, qry, id).Scan(
		&obj.ID,
		&obj.Email,
		&obj.Version,
		&obj.Name,
		&obj.Salt,
		&obj.Password,
		&obj.Token,
		&refCreatedBy_ID,
		&refCreatedBy_Email,
		&refCreatedBy_Name,
		&obj.CreatedAt,
		&refUpdatedBy_ID,
		&refUpdatedBy_Email,
		&refUpdatedBy_Name,
		&obj.UpdatedAt,
	)
	if err != nil {
		return nil, err
	}
	if refCreatedBy_ID.Valid {
		obj.CreatedBy = &User{ID: refCreatedBy_ID.Int64}
	}
	if obj.CreatedBy != nil && refCreatedBy_Email.Valid {
		obj.CreatedBy.Email = refCreatedBy_Email.String
	}
	if obj.CreatedBy != nil && refCreatedBy_Name.Valid {
		obj.CreatedBy.Name = refCreatedBy_Name.String
	}
	if refUpdatedBy_ID.Valid {
		obj.UpdatedBy = &User{ID: refUpdatedBy_ID.Int64}
	}
	if obj.UpdatedBy != nil && refUpdatedBy_Email.Valid {
		obj.UpdatedBy.Email = refUpdatedBy_Email.String
	}
	if obj.UpdatedBy != nil && refUpdatedBy_Name.Valid {
		obj.UpdatedBy.Name = refUpdatedBy_Name.String
	}
	return &obj, nil
}

func (r *UserRepositoryImpl) GetByName(ctx context.Context, name string) (*User, error) {
	qry := `
    SELECT
      obj.id,
      obj.email,
      obj.version,
      obj.name,
      obj.salt,
      obj.password,
      obj.token,
      objCreatedBy.id,
      objCreatedBy.email,
      objCreatedBy.name,
      obj.created_at,
      objUpdatedBy.id,
      objUpdatedBy.email,
      objUpdatedBy.name,
      obj.updated_at
    FROM
      ((app_user obj LEFT JOIN app_user objCreatedBy ON obj.created_by = objCreatedBy.id)
      LEFT JOIN app_user objUpdatedBy ON obj.updated_by = objUpdatedBy.id)
    WHERE
      obj.name = $1`
	var obj User
	var refCreatedBy_ID sql.NullInt64
	var refCreatedBy_Email sql.NullString
	var refCreatedBy_Name sql.NullString
	var refUpdatedBy_ID sql.NullInt64
	var refUpdatedBy_Email sql.NullString
	var refUpdatedBy_Name sql.NullString
	err := r.db.QueryRowContext(ctx, qry, name).Scan(
		&obj.ID,
		&obj.Email,
		&obj.Version,
		&obj.Name,
		&obj.Salt,
		&obj.Password,
		&obj.Token,
		&refCreatedBy_ID,
		&refCreatedBy_Email,
		&refCreatedBy_Name,
		&obj.CreatedAt,
		&refUpdatedBy_ID,
		&refUpdatedBy_Email,
		&refUpdatedBy_Name,
		&obj.UpdatedAt,
	)
	if err != nil {
		return nil, err
	}
	if refCreatedBy_ID.Valid {
		obj.CreatedBy = &User{ID: refCreatedBy_ID.Int64}
	}
	if obj.CreatedBy != nil && refCreatedBy_Email.Valid {
		obj.CreatedBy.Email = refCreatedBy_Email.String
	}
	if obj.CreatedBy != nil && refCreatedBy_Name.Valid {
		obj.CreatedBy.Name = refCreatedBy_Name.String
	}
	if refUpdatedBy_ID.Valid {
		obj.UpdatedBy = &User{ID: refUpdatedBy_ID.Int64}
	}
	if obj.UpdatedBy != nil && refUpdatedBy_Email.Valid {
		obj.UpdatedBy.Email = refUpdatedBy_Email.String
	}
	if obj.UpdatedBy != nil && refUpdatedBy_Name.Valid {
		obj.UpdatedBy.Name = refUpdatedBy_Name.String
	}
	return &obj, nil
}

func (r *UserRepositoryImpl) FindOne(ctx context.Context, filter []UserFilter, sort []UserSort) (*User, error) {
	qfilter := []string{}
	args := []any{}
	for _, f := range filter {
		switch f.Field {
		case UserField_Email:
			switch f.Op {
			case FilterOp_EQ:
				args = append(args, f.Value)
				qfilter = append(qfilter, fmt.Sprintf("obj.email = $%d", len(args)))
			case FilterOp_Like:
				args = append(args, f.Value)
				qfilter = append(qfilter, fmt.Sprintf("obj.email LIKE $%d", len(args)))
			case FilterOp_ILike:
				args = append(args, f.Value)
				qfilter = append(qfilter, fmt.Sprintf("obj.email ILIKE $%d", len(args)))
			default:
				return nil, fmt.Errorf("unsupported filter op %v for field %v", f.Op, f.Field)
			}
		case UserField_Name:
			switch f.Op {
			case FilterOp_EQ:
				args = append(args, f.Value)
				qfilter = append(qfilter, fmt.Sprintf("obj.name = $%d", len(args)))
			case FilterOp_Like:
				args = append(args, f.Value)
				qfilter = append(qfilter, fmt.Sprintf("obj.name LIKE $%d", len(args)))
			case FilterOp_ILike:
				args = append(args, f.Value)
				qfilter = append(qfilter, fmt.Sprintf("obj.name ILIKE $%d", len(args)))
			default:
				return nil, fmt.Errorf("unsupported filter op %v for field %v", f.Op, f.Field)
			}
		default:
			return nil, fmt.Errorf("unsupported filter field %v", f.Field)
		}
	}
	qry := `
    SELECT
      obj.id,
      obj.email,
      obj.version,
      obj.name,
      obj.salt,
      obj.password,
      obj.token,
      objCreatedBy.id,
      objCreatedBy.email,
      objCreatedBy.name,
      obj.created_at,
      objUpdatedBy.id,
      objUpdatedBy.email,
      objUpdatedBy.name,
      obj.updated_at
    FROM
      ((app_user obj LEFT JOIN app_user objCreatedBy ON obj.created_by = objCreatedBy.id)
      LEFT JOIN app_user objUpdatedBy ON obj.updated_by = objUpdatedBy.id)`
	if len(qfilter) > 0 {
		qry += "\n  WHERE " + strings.Join(qfilter, " AND\n    ")
	}
	if len(sort) > 0 {
		sorts := []string{}
		for _, f := range sort {
			switch f.Field {
			case UserField_Email:
				if f.Dir == SortDir_ASC {
					sorts = append(sorts, "obj.email ASC")
				} else {
					sorts = append(sorts, "obj.email DESC")
				}
			case UserField_Name:
				if f.Dir == SortDir_ASC {
					sorts = append(sorts, "obj.name ASC")
				} else {
					sorts = append(sorts, "obj.name DESC")
				}
			}
		}
		if len(sorts) > 0 {
			qry += "\n  ORDER BY " + strings.Join(sorts, ", ")
		}
	}
	qry += "\n  LIMIT 1"
	rows, err := r.db.QueryContext(ctx, qry, args...)
	if err != nil {
		slog.Error("Query list", "qry:", qry, "Error:", err)
		return nil, err
	}
	if rows.Next() {
		var obj User
		var refCreatedBy_ID sql.NullInt64
		var refCreatedBy_Email sql.NullString
		var refCreatedBy_Name sql.NullString
		var refUpdatedBy_ID sql.NullInt64
		var refUpdatedBy_Email sql.NullString
		var refUpdatedBy_Name sql.NullString
		err = rows.Scan(
			&obj.ID,
			&obj.Email,
			&obj.Version,
			&obj.Name,
			&obj.Salt,
			&obj.Password,
			&obj.Token,
			&refCreatedBy_ID,
			&refCreatedBy_Email,
			&refCreatedBy_Name,
			&obj.CreatedAt,
			&refUpdatedBy_ID,
			&refUpdatedBy_Email,
			&refUpdatedBy_Name,
			&obj.UpdatedAt,
		)
		if err != nil {
			return nil, err
		}
		if refCreatedBy_ID.Valid {
			obj.CreatedBy = &User{ID: refCreatedBy_ID.Int64}
		}
		if obj.CreatedBy != nil && refCreatedBy_Email.Valid {
			obj.CreatedBy.Email = refCreatedBy_Email.String
		}
		if obj.CreatedBy != nil && refCreatedBy_Name.Valid {
			obj.CreatedBy.Name = refCreatedBy_Name.String
		}
		if refUpdatedBy_ID.Valid {
			obj.UpdatedBy = &User{ID: refUpdatedBy_ID.Int64}
		}
		if obj.UpdatedBy != nil && refUpdatedBy_Email.Valid {
			obj.UpdatedBy.Email = refUpdatedBy_Email.String
		}
		if obj.UpdatedBy != nil && refUpdatedBy_Name.Valid {
			obj.UpdatedBy.Name = refUpdatedBy_Name.String
		}
		return &obj, nil
	}
	return nil, fmt.Errorf("not found")
}

func (r *UserRepositoryImpl) Find(ctx context.Context, filter []UserFilter, sort []UserSort, limit int, offset int64) ([]User, int64, error) {
	qfilter := []string{}
	args := []any{}
	for _, f := range filter {
		switch f.Field {
		case UserField_Email:
			switch f.Op {
			case FilterOp_EQ:
				args = append(args, f.Value)
				qfilter = append(qfilter, fmt.Sprintf("obj.email = $%d", len(args)))
			case FilterOp_Like:
				args = append(args, f.Value)
				qfilter = append(qfilter, fmt.Sprintf("obj.email LIKE $%d", len(args)))
			case FilterOp_ILike:
				args = append(args, f.Value)
				qfilter = append(qfilter, fmt.Sprintf("obj.email ILIKE $%d", len(args)))
			default:
				return nil, 0, fmt.Errorf("unsupported filter op %v for field %v", f.Op, f.Field)
			}
		case UserField_Name:
			switch f.Op {
			case FilterOp_EQ:
				args = append(args, f.Value)
				qfilter = append(qfilter, fmt.Sprintf("obj.name = $%d", len(args)))
			case FilterOp_Like:
				args = append(args, f.Value)
				qfilter = append(qfilter, fmt.Sprintf("obj.name LIKE $%d", len(args)))
			case FilterOp_ILike:
				args = append(args, f.Value)
				qfilter = append(qfilter, fmt.Sprintf("obj.name ILIKE $%d", len(args)))
			default:
				return nil, 0, fmt.Errorf("unsupported filter op %v for field %v", f.Op, f.Field)
			}
		default:
			return nil, 0, fmt.Errorf("unsupported filter field %v", f.Field)
		}
	}
	qry := `SELECT COUNT(obj.id)
  FROM app_user obj`
	if len(qfilter) > 0 {
		qry += " WHERE " + strings.Join(qfilter, " AND ")
	}
	total := int64(0)
	err := r.db.QueryRowContext(ctx, qry, args...).Scan(&total)
	if err != nil {
		slog.Error("Query count", "qry:", qry, "Error:", err)
		return nil, 0, err
	}
	qry = `
    SELECT
      obj.id,
      obj.email,
      obj.version,
      obj.name,
      obj.salt,
      obj.password,
      obj.token,
      objCreatedBy.id,
      objCreatedBy.email,
      objCreatedBy.name,
      obj.created_at,
      objUpdatedBy.id,
      objUpdatedBy.email,
      objUpdatedBy.name,
      obj.updated_at
    FROM
      ((app_user obj LEFT JOIN app_user objCreatedBy ON obj.created_by = objCreatedBy.id)
      LEFT JOIN app_user objUpdatedBy ON obj.updated_by = objUpdatedBy.id)`
	if len(qfilter) > 0 {
		qry += "\n  WHERE " + strings.Join(qfilter, " AND\n    ")
	}
	if len(sort) > 0 {
		sorts := []string{}
		for _, f := range sort {
			switch f.Field {
			case UserField_Email:
				if f.Dir == SortDir_ASC {
					sorts = append(sorts, "obj.email ASC")
				} else {
					sorts = append(sorts, "obj.email DESC")
				}
			case UserField_Name:
				if f.Dir == SortDir_ASC {
					sorts = append(sorts, "obj.name ASC")
				} else {
					sorts = append(sorts, "obj.name DESC")
				}
			}
		}
		if len(sorts) > 0 {
			qry += "\n  ORDER BY " + strings.Join(sorts, ", ")
		}
	}
	qry += fmt.Sprintf("\n  LIMIT %d OFFSET %d", limit, offset)
	rows, err := r.db.QueryContext(ctx, qry, args...)
	if err != nil {
		slog.Error("Query list", "qry:", qry, "Error:", err)
		return nil, 0, err
	}
	list := []User{}
	for rows.Next() {
		var obj User
		var refCreatedBy_ID sql.NullInt64
		var refCreatedBy_Email sql.NullString
		var refCreatedBy_Name sql.NullString
		var refUpdatedBy_ID sql.NullInt64
		var refUpdatedBy_Email sql.NullString
		var refUpdatedBy_Name sql.NullString
		err = rows.Scan(
			&obj.ID,
			&obj.Email,
			&obj.Version,
			&obj.Name,
			&obj.Salt,
			&obj.Password,
			&obj.Token,
			&refCreatedBy_ID,
			&refCreatedBy_Email,
			&refCreatedBy_Name,
			&obj.CreatedAt,
			&refUpdatedBy_ID,
			&refUpdatedBy_Email,
			&refUpdatedBy_Name,
			&obj.UpdatedAt,
		)
		if err != nil {
			return nil, total, err
		}
		if refCreatedBy_ID.Valid {
			obj.CreatedBy = &User{ID: refCreatedBy_ID.Int64}
		}
		if obj.CreatedBy != nil && refCreatedBy_Email.Valid {
			obj.CreatedBy.Email = refCreatedBy_Email.String
		}
		if obj.CreatedBy != nil && refCreatedBy_Name.Valid {
			obj.CreatedBy.Name = refCreatedBy_Name.String
		}
		if refUpdatedBy_ID.Valid {
			obj.UpdatedBy = &User{ID: refUpdatedBy_ID.Int64}
		}
		if obj.UpdatedBy != nil && refUpdatedBy_Email.Valid {
			obj.UpdatedBy.Email = refUpdatedBy_Email.String
		}
		if obj.UpdatedBy != nil && refUpdatedBy_Name.Valid {
			obj.UpdatedBy.Name = refUpdatedBy_Name.String
		}
		list = append(list, obj)
	}
	return list, total, nil
}

func (r *UserRepositoryImpl) Update(ctx context.Context, obj User, fields []UserField) error {
	var tx *sql.Tx
	var err error
	var txNew bool
	tx, err = r.db.BeginTx(ctx, nil)
	if err != nil {
		return err
	}
	txNew = true
	defer tx.Rollback()
	args := []any{}
	qry := `UPDATE app_user SET`
	nf := false
	for _, f := range fields {
		if nf {
			qry += ",\n      "
		} else {
			qry += "\n      "
			nf = true
		}
		switch f {
		case UserField_Email:
			args = append(args, obj.Email)
			qry += fmt.Sprintf("  email = $%d", len(args))
		case UserField_Name:
			args = append(args, obj.Name)
			qry += fmt.Sprintf("  name = $%d", len(args))
		case UserField_Token:
			args = append(args, obj.Token)
			qry += fmt.Sprintf("  token = $%d", len(args))
		case UserField_CreatedBy:
			args = append(args, obj.CreatedBy)
			qry += fmt.Sprintf("  created_by = $%d", len(args))
		case UserField_CreatedAt:
			args = append(args, obj.CreatedAt)
			qry += fmt.Sprintf("  created_at = $%d", len(args))
		case UserField_UpdatedBy:
			args = append(args, obj.UpdatedBy)
			qry += fmt.Sprintf("  updated_by = $%d", len(args))
		case UserField_UpdatedAt:
			args = append(args, obj.UpdatedAt)
			qry += fmt.Sprintf("  updated_at = $%d", len(args))
		default:
			return fmt.Errorf("field %v is unknown", f)
		}
	}
	qry += "\nWHERE\n"
	args = append(args, obj.ID)
	qry += fmt.Sprintf("  id = $%d", len(args))
	args = append(args, obj.Version)
	qry += fmt.Sprintf(" AND\n  version = $%d", len(args))
	res, err := tx.ExecContext(ctx, qry, args...)
	if err != nil {
		slog.Error("Update", "qry:", qry, "Error:", err)
		return err
	}
	ra, err := res.RowsAffected()
	if err != nil {
		slog.Error("Update", "qry:", qry, "args:", args, "Error:", err)
		return err
	}
	if ra == 0 {
		return fmt.Errorf("no rows affected")
	}
	if ra != 1 {
		return fmt.Errorf("invalid rows affected (%d)", ra)
	}
	if txNew {
		err = tx.Commit()
		if err != nil {
			return err
		}
	}
	return nil
}

func (r *UserRepositoryImpl) Delete(ctx context.Context, id int64) error {
	var tx *sql.Tx
	var err error
	var txNew bool
	tx, err = r.db.BeginTx(ctx, nil)
	if err != nil {
		return err
	}
	txNew = true
	qry := `
    DELETE FROM app_user WHERE
      obj.id = $1`
	res, err := tx.ExecContext(ctx, qry, id)
	if err != nil {
		return err
	}
	ra, err := res.RowsAffected()
	if err != nil {
		return err
	}
	if ra == 0 {
		return fmt.Errorf("no rows affected")
	}
	if ra != 1 {
		return fmt.Errorf("invalid rows affected (%d)", ra)
	}
	if txNew {
		err = tx.Commit()
		if err != nil {
			return err
		}
	}
	return nil
}
