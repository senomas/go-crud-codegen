// Code generated by apigen. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
)

type UserRepository interface {
	Create(obj User) (*User, error)
	Get(id int64) (*User, error)
	Find(filter UserFilter, sort []UserSort) ([]User, int64, error)
	Update(obj User) error
	Delete(id int64) error
}

type UserRepositoryImpl struct {
	ctx context.Context
	db  *sql.DB
}

func (r *UserRepositoryImpl) Create(obj User) (*User, error) {
	tx, err := r.db.BeginTx(r.ctx, nil)
	if err != nil {
		return nil, err
	}
	defer tx.Rollback()
	sql := `
    INSERT INTO app_user (
      email,
      name,
      salt,
      password,
      token)
    VALUES (
      $1, $2, $3, $4, $5)`
	res, err := r.db.ExecContext(r.ctx, sql,
		obj.Email,
		obj.Name,
		obj.Salt,
		obj.Password,
		obj.Token,
	)
	if err != nil {
		return nil, err
	}
	obj.ID, err = res.LastInsertId()
	if err != nil {
		return nil, err
	}
	err = tx.Commit()
	if err != nil {
		return nil, err
	}
	return &obj, nil
}

func (r *UserRepositoryImpl) Get(id int64) (*User, error) {
	sql := `
    SELECT
      id,
      email,
      name,
      salt,
      password,
      token
    FROM app_user
    WHERE
      id = $1`
	var obj User
	err := r.db.QueryRowContext(r.ctx, sql, id).Scan(
		&obj.ID,
		&obj.Email,
		&obj.Name,
		&obj.Salt,
		&obj.Password,
		&obj.Token,
	)
	if err != nil {
		return nil, err
	}
	return &obj, nil
}
